from typing import Any, Callable, List

class SchemaError(Exception):
    autos: List[str | None]
    errors: List[str | None] | None
    def __init__(
        self, autos: List[str | None], errors: List[str | None] | None = ...
    ) -> None: ...
    @property
    def code(self) -> str: ...

class SchemaWrongKeyError(SchemaError): ...
class SchemaMissingKeyError(SchemaError): ...
class SchemaOnlyOneAllowedError(SchemaError): ...
class SchemaForbiddenKeyError(SchemaError): ...
class SchemaUnexpectedTypeError(SchemaError): ...

class And:
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    @property
    def args(self) -> Any: ...
    def validate(self, data: Any, **kwargs: Any) -> Any: ...

class Or(And):
    only_one: Any
    match_count: int
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def reset(self) -> None: ...
    def validate(self, data: Any, **kwargs: Any) -> Any: ...

class Regex:
    NAMES: Any
    def __init__(
        self, pattern_str: str, flags: int = ..., error: Any | None = ...
    ) -> None: ...
    @property
    def pattern_str(self) -> str: ...
    def validate(self, data: Any, **kwargs: Any) -> Any: ...

class Use:
    def __init__(
        self, callable_: Callable[[Any], Any], error: Any | None = ...
    ) -> None: ...
    def validate(self, data: Any, **kwargs: Any) -> Any: ...

class Schema:
    as_reference: Any
    def __init__(
        self,
        schema: Any,
        error: Any | None = ...,
        ignore_extra_keys: bool = ...,
        name: Any | None = ...,
        description: Any | None = ...,
        as_reference: bool = ...,
    ) -> None: ...
    @property
    def schema(self) -> Any: ...
    @property
    def description(self) -> Any | None: ...
    @property
    def name(self) -> Any: ...
    @property
    def ignore_extra_keys(self) -> bool: ...
    def is_valid(self, data: Any, **kwargs: Any) -> bool: ...
    def validate(self, data: Any, **kwargs: Any) -> Any: ...
    def json_schema(
        self, schema_id: str, use_refs: bool = ..., **kwargs: Any
    ) -> Any: ...

class Optional(Schema):
    default: Any
    key: Any
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def reset(self) -> None: ...

class Hook(Schema):
    handler: Any
    key: Any
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Forbidden(Hook):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Literal:
    def __init__(self, value: Any, description: Any | None = ...) -> None: ...
    @property
    def description(self) -> Any | None: ...
    @property
    def schema(self) -> Any: ...

class Const(Schema):
    def validate(self, data: Any, **kwargs: Any) -> Any: ...
